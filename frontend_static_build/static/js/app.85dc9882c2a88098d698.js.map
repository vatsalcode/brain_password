{"version":3,"sources":["webpack:///./src/js/data/memories.json","webpack:///./src/js/shaders/xRay.frag","webpack:///./src/js/chunks/noise.raw.xml","webpack:///./src/js/MainBrain.js","webpack:///./src/js/chunks/random.raw.xml","webpack:///./src/js/shaders/xRay.vert","webpack:///./src/app.js","webpack:///./src/js/chunks/rotate.raw.xml","webpack:///./src/js/services/particlesSystem.js"],"names":["module","exports","affective","analytic","process","semantic","episodic","cerebellum","bridge","amygdala","lines","THREE","__webpack_require__","_gsap","MainBrain","_classCallCheck3","default","this","initialWidth","window","innerWidth","initialHeight","innerHeight","finalWidth","finalHeight","camera","PerspectiveCamera","position","z","scene","Scene","background","Color","fog","Fog","renderer","WebGLRenderer","antialias","alpha","preserveDrawingBuffer","logarithmicDepthBuffer","setPixelRatio","devicePixelRatio","setSize","sortObjects","setClearColor","gammaInput","gammaOutput","document","getElementById","appendChild","domElement","orbitControls","OrbitControls","enableDamping","dampingFactor","enableZoom","zoomSpeed","panSpeed","minDistance","maxDistance","autoRotate","autoRotateSpeed","rotateSpeed","screenSpacePanning","addEventListener","onWindowResize","bind","clock","Clock","addBrain","ambienlight","AmbientLight","add","deltaTime","particlesColor","particlesStartColor","memories","_memories2","memorySelected","BRAIN_MODEL","loadingManager","LoadingManager","onLoad","handlerLoad","onProgress","handlerProgress","onError","handlerError","onStart","handlerStart","loadOBJs","console","log","addParticlesSystem","animate","startIntro","_this","OBJLoader","load","model","_this2","brainBufferGeometries","traverse","child","LineSegments","_extends3","addLinesPath","Mesh","geometry","verticesNeedUpdate","push","storeBrainVertices","endPointsCollections","BufferGeometryUtils","mergeBufferGeometries","error","_this3","progress","p","count","once","TweenMax","fromTo","ease","Power4","easeInOut","onUpdate","children","translateY","testRow","testDiv","createElement","testButton_1","testButton_2","testDivText","innerHTML","style","fontSize","marginRight","marginTop","headingDiv","setAttribute","color","onclick","location","href","particlesSystem","transform","update","getDelta","xRay","requestAnimationFrame","render","updateProjectionMatrix","aspect","_particlesSystem2","particles","url","itemsLoaded","itemsTotal","mesh","_keys2","map","l","name","includes","attributes","array","m","length","_MainBrain","BAS","ParticleSystem","mainBrain","brainParticles","_init","init","xRayEffect","systemPoints","brainPoints","me","PointBufferGeometry","loadingCircle","getLoadingPoints","createAttribute","data","index","num","startVec3","Vector3","x","y","Math","randFloat","toArray","_me$particlesStartCol","r","g","b","setRGB","_me$particlesStartCol2","totalDuration","duration","random","material","PointsAnimationMaterial","vertexColors","VertexColors","deptWrite","blending","AdditiveBlending","depthTest","transparent","uniforms","uTime","type","value","uProgress","uAngle","uPointSizeEffect","uColor","defines","uniformValues","size","scale","vertexFunctions","ShaderChunk","ease_expo_in_out","quaternion_rotation","_rotateRaw2","_randomRaw2","_noiseRaw2","vertexParameters","varyingParameters","vertexInit","vertexPosition","vertexColor","fragmentParameters","fragmentShape","xRayMaterial","ShaderMaterial","c","glowColor","viewVector","lightningTexture","brainXRayLight","offsetY","vertexShader","fragmentShader","side","DoubleSide","depthWrite","Points","xRayGeometry","Geometry","fromBufferGeometry","computeFaceNormals","mergeVertices","computeVertexNormals","frustumCulled","customDistanceMaterial","Utils","createDistanceAnimationMaterial","customDepthMaterial","brain","subVectors","status","Power1","easeIn","sin","onComplete","val","updateTransitioning","RingBufferGeometry"],"mappings":"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","file":"static/js/app.85dc9882c2a88098d698.js","sourcesContent":["module.exports = {\"affective\":[],\"analytic\":[],\"process\":[],\"semantic\":[],\"episodic\":[],\"cerebellum\":[],\"bridge\":[],\"amygdala\":[],\"lines\":{\"affective\":[],\"analytic\":[],\"process\":[],\"semantic\":[],\"episodic\":[]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/data/memories.json\n// module id = 2J3f\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 glowColor;\\nuniform sampler2D lightningTexture;\\nvarying float intensity;\\nvarying vec2 vUv;\\nuniform float offsetY;\\nuniform float uTime;\\n\\nvoid main(){\\n    vec2 uv = vUv;\\n    uv.y += offsetY;\\n\\n  \\tvec3 glow = glowColor * intensity;\\n    vec3 color = vec3(step(0.1, uv.y) - step(0.2, uv.y)) - vec3(texture2D(lightningTexture, uv));\\n\\n\\tfloat alpha = clamp(cos(uTime* 3.0) , 0.5, 1.0);\\n\\n    gl_FragColor = vec4( glow + color, alpha);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/xRay.frag\n// module id = EYp+\n// module chunks = 1","module.exports = \"float noise (in vec2 st) {\\n    vec2 i = floor(st);\\n    vec2 f = fract(st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    // Smooth Interpolation\\n\\n    // Cubic Hermine Curve.  Same as SmoothStep()\\n    vec2 u = f*f*(3.0-2.0*f);\\n    // u = smoothstep(0.,1.,f);\\n\\n    // Mix 4 coorners porcentages\\n    return mix(a, b, u.x) +\\n        (c - a)* u.y * (1.0 - u.x) +\\n        (d - b) * u.x * u.y;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/noise.raw.xml\n// module id = FAD+\n// module chunks = 1","/* eslint-disable */\nimport * as THREE from \"three\";\nimport { Power4, TweenMax } from \"gsap\";\nimport \"three/examples/js/BufferGeometryUtils\";\nimport \"three/examples/js/controls/OrbitControls\";\nimport 'three/examples/js/loaders/OBJLoader';\nimport \"three/examples/js/modifiers/BufferSubdivisionModifier\";\nimport ParticleSystem from \"./services/particlesSystem\";\nimport Memories from \"./data/memories.json\";\nimport { head } from \"lodash\";\n\nclass MainBrain {\n  constructor() {\n    this.initialWidth = window.innerWidth\n    this.initialHeight = window.innerHeight\n\n    this.finalWidth = window.innerWidth / 2\n    this.finalHeight = window.innerHeight / 2\n\n    this.camera = new THREE.PerspectiveCamera(\n      50,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    this.camera.position.z = 1000;\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(\"black\");\n    this.scene.fog = new THREE.Fog(0xa7b6d2, 300, 1300);\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      preserveDrawingBuffer: false,\n      logarithmicDepthBuffer: true,\n    });\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.sortObjects = false;\n    this.renderer.setClearColor(0x00000, 0.0);\n    this.renderer.gammaInput = true;\n    this.renderer.gammaOutput = true;\n\n    var testObj = document.getElementById(\"testObject\")\n    testObj.appendChild(this.renderer.domElement);\n\n    this.orbitControls = new THREE.OrbitControls(\n      this.camera,\n      this.renderer.domElement\n    );\n    this.orbitControls.enableDamping = true;\n    this.orbitControls.dampingFactor = 0.25;\n    this.orbitControls.enableZoom = true;\n    this.orbitControls.zoomSpeed = 0.1;\n    this.orbitControls.panSpeed = 0.1;\n    this.orbitControls.minDistance = 50;\n    this.orbitControls.maxDistance = 2500;\n    this.orbitControls.autoRotate = false;\n    this.orbitControls.autoRotateSpeed = 1.0;\n    this.orbitControls.rotateSpeed = 0.1;\n    this.orbitControls.screenSpacePanning = true;\n\n    window.addEventListener(\"resize\", this.onWindowResize.bind(this), false);\n\n    this.clock = new THREE.Clock();\n    this.addBrain = this.addBrain.bind(this);\n\n    this.ambienlight = new THREE.AmbientLight(0xb8c5cf, 0);\n    this.scene.add(this.ambienlight);\n\n    this.deltaTime = 0;\n    this.particlesColor = new THREE.Color(0xffffff);\n    this.particlesStartColor = new THREE.Color(0xffffff);\n\n    this.memories = Memories;\n    this.memorySelected = [\n      \"analytic\",\n      \"episodic\",\n      \"process\",\n      \"semantic\",\n      \"affective\",\n    ];\n\n    this.BRAIN_MODEL = {};\n    this.loadingManager = new THREE.LoadingManager();\n    this.loadingManager.onLoad = this.handlerLoad.bind(this);\n    this.loadingManager.onProgress = this.handlerProgress;\n    this.loadingManager.onError = this.handlerError;\n    this.loadingManager.onStart = this.handlerStart;\n    this.loadOBJs();\n  }\n\n  static handlerStart() {\n    console.log('Starting');\n  }\n\n  static handlerProgress(url, itemsLoaded, itemsTotal) {\n    console.log(`Loading file: ${url}.\\nLoaded ${itemsLoaded} of ${itemsTotal} files.`);\n  }\n\n  handlerLoad() {\n    console.log('loading Complete!');\n\n    this.addBrain();\n    this.addParticlesSystem();\n\n    this.animate();\n    this.startIntro();\n  }\n\n  static handlerError(url) {\n    console.log(`There was an error loading ${url}`);\n  }\n\n  loadOBJs() {\n    const loader = new THREE.OBJLoader(this.loadingManager);\n    loader.load(`static/models/BrainUVs.obj`, (model) => {\n      this.BRAIN_MODEL = model;\n    });\n  }\n\n\n  addBrain() {\n    this.brainBufferGeometries = [];\n    this.BRAIN_MODEL.traverse((child) => {\n      if (child instanceof THREE.LineSegments) {\n        this.memories.lines = {\n          ...this.memories.lines,\n          ...MainBrain.addLinesPath(child, this.memories),\n        };\n      }\n      if (!(child instanceof THREE.Mesh)) {\n        return;\n      }\n      child.geometry.verticesNeedUpdate = true;\n      this.brainBufferGeometries.push(child.geometry);\n\n      this.memories = {\n        ...this.memories,\n        ...MainBrain.storeBrainVertices(child, this.memories),\n      };\n\n      this.endPointsCollections = THREE.BufferGeometryUtils.mergeBufferGeometries(\n        this.brainBufferGeometries\n      );\n      console.error(\"MERGE WITH TEXTURE\", this.endPointsCollections);\n    });\n\n  }\n\n  startIntro() {\n    const progress = { p: 1000 };\n    let count = 25\n    let once = true\n    TweenMax.fromTo(\n      progress,\n      6.5,\n      { p: 1000 },\n      {\n        // Initially 380, controls how big the brain gets at the end of animation\n        p: 380,\n        ease: Power4.easeInOut,\n        onUpdate: () => {\n          this.camera.position.z = progress.p;\n          if (progress.p < 450 && count != 0) {\n            // this.scene.children[2].translateX(-3)\n            // this.scene.children[1].translateX(-3)\n\n            // this.scene.children[2].translateY(1.5)\n            // this.scene.children[1].translateY(1.5)\n\n            this.initialHeight = this.initialHeight / (1.02);\n            this.initialWidth = this.initialWidth / (1.02);\n\n            count--\n          }\n          else if (progress.p < 700 && count == 0 && once) {\n            \n            this.scene.children[2].translateY(-35)\n            this.scene.children[1].translateY(-35)\n\n\n            // Adds the row\n            var testRow = document.getElementById(\"testRow\")\n\n            // Adds the column div and buttons \n            var testDiv = document.createElement('div')\n            var testButton_1 = document.createElement('button')\n            var testButton_2 = document.createElement('button')\n            var testDivText = document.createElement('div')\n            testDivText.innerHTML = \"This study makes use of brain signals or electroencephalogram (EEG) as the biometric for authentication. The approach used to design this authentication system is based on deep learning architectures since they have revolutionized end-to-end learning, that is, learning from raw data. The architecture used in this study is a famous meta-learning model known as Siamese Network.\"\n            testDivText.style.fontSize = \"1.2em\"\n            testDivText.style.marginRight = \"3rem\"\n            testDivText.style.marginTop = \"2rem\"\n            \n\n            var headingDiv = document.createElement('div')\n            headingDiv.innerHTML = \"About Us\"\n            headingDiv.setAttribute(\"class\", \"headingCss\")\n            testDiv.appendChild(headingDiv)\n\n            testDiv.appendChild(testDivText)\n            // Replace it with margin\n            testDiv.appendChild(document.createElement(\"BR\"))\n            testDiv.appendChild(document.createElement(\"BR\"))\n            testDiv.appendChild(document.createElement(\"BR\"))\n            \n            testDiv.style.color = \"white\"\n            testButton_1.innerHTML = \"Sign Up\"\n            // testButton_1.setAttribute(\"class\", \"btn btn-light mx-5\")\n            testButton_1.setAttribute(\"class\", \"fillButton fill\")\n            testButton_1.onclick = function () {\n              window.location.href = \"signup.html\"\n            }\n            testButton_2.innerHTML = \"Login\"\n            // testButton_2.setAttribute(\"class\", \"btn btn-light mx-5\")\n            testButton_2.setAttribute(\"class\", \"fillButton fill\")\n            testButton_2.onclick = function () {\n              window.location.href = \"login.html\"\n            }\n\n            testDiv.appendChild(testButton_1)\n            testDiv.appendChild(testButton_2)\n            testDiv.setAttribute(\"class\", \"col\")\n            testRow.appendChild(testDiv)\n            once = false\n          }\n        },\n        onStart: () => {\n          this.particlesSystem.transform(true);\n\n        },\n      }\n    );\n  }\n\n  static addLinesPath(mesh, memories) {\n    const keys = Object.keys(memories.lines);\n    keys.map((l) => {\n      if (mesh.name.includes(l)) {\n        memories.lines[l] = mesh.geometry.attributes.position.array;\n        return memories.lines;\n      }\n      return [];\n    });\n  }\n\n  static storeBrainVertices(mesh, memories) {\n    const keys = Object.keys(memories);\n\n    keys.map((m) => {\n      if (mesh.name.includes(m)) {\n        if (memories[m].length) {\n          memories[m].push(mesh.geometry);\n          memories[m] = [\n            THREE.BufferGeometryUtils.mergeBufferGeometries(memories[m]),\n          ];\n          return memories;\n        }\n        return memories[m].push(mesh.geometry);\n      }\n      return [];\n    });\n  }\n\n\n  animate() {\n    this.orbitControls.update();\n    this.orbitControls.autoRotateSpeed = 0.5;\n\n    this.renderer.setSize(this.initialWidth, this.initialHeight);\n    this.deltaTime += this.clock.getDelta();\n\n    this.particlesSystem.update(\n      this.deltaTime,\n      this.camera,\n      this.particlesSystem.xRay\n    );\n\n    requestAnimationFrame(this.animate.bind(this));\n\n    this.renderer.render(this.scene, this.camera);\n\n    this.camera.updateProjectionMatrix();\n  }\n\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n\n  addParticlesSystem() {\n    this.particlesSystem = new ParticleSystem(\n      this,\n      this.endPointsCollections,\n      this.memories\n    );\n    this.scene.add(this.particlesSystem.particles);\n    this.scene.add(this.particlesSystem.xRay);\n\n  }\n}\n\nexport default MainBrain;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/MainBrain.js","module.exports = \"float random (in vec2 st) {\\n   return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/random.raw.xml\n// module id = XbjG\n// module chunks = 1","module.exports = \"#define GLSLIFY 1\\nuniform vec3 viewVector;\\nuniform float c;\\nuniform float p;\\nuniform float uTime;\\nvarying float intensity;\\nvarying  vec2 vUv;\\n\\nvoid main(){\\n\\n    vUv = uv;\\n\\n    vec3 vNormal = normalize( normalMatrix * normal );\\n\\tvec3 vNormel = normalize( normalMatrix * viewVector );\\n    intensity = pow(c - abs(dot(vNormal, vec3(0, 0, 1))), p);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n }\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/shaders/xRay.vert\n// module id = cRIw\n// module chunks = 1","import './css/style.css';\nimport MainBrain from './js/MainBrain';\n\n// eslint-disable-next-line\nnew MainBrain()\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.js","module.exports = \"vec2 rotate2D(vec2 _st, float _angle){\\n        _st -= 0.5;\\n        _st =  mat2(cos(_angle),-sin(_angle), sin(_angle),cos(_angle)) * _st;\\n        _st += 0.5;\\n  return _st;\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/chunks/rotate.raw.xml\n// module id = joTG\n// module chunks = 1","/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"data\"] }] */\nimport * as BAS from 'three-bas';\nimport * as THREE from 'three';\nimport { Power1, TweenMax } from 'gsap';\nimport noise from '../chunks/noise.raw.xml';\nimport random from '../chunks/random.raw.xml';\nimport rotate from '../chunks/rotate.raw.xml';\nimport xRayVertex from '../shaders/xRay.vert';\nimport xRayFrag from '../shaders/xRay.frag';\n\n\nclass ParticleSystem {\n    constructor(mainBrain, brainParticles, memories) {\n        // this.chuncks = new Chuncks();\n        console.log(brainParticles);\n        this.brainParticles = brainParticles;\n        this.memories = memories;\n        this.mainBrain = mainBrain;\n        this.particlesStartColor = new THREE.Color(0xffffff);\n        this.particlesColor = new THREE.Color(0xffffff);\n        const { xRayEffect, systemPoints } = this.init();\n        this.particles = systemPoints;\n        this.xRay = xRayEffect;\n    }\n\n    static getLoadingPoints() {\n        const geometry = new THREE.RingBufferGeometry(100, 40, 150, 150, 20);\n        return geometry.attributes.position.array;\n    }\n\n    init() {\n        const duration = 1.0;\n        const maxPointDelay = 0.3;\n\n        const brainPoints = this.brainParticles.attributes.position.array;\n\n        const count = brainPoints.length / 3;\n        const me = this;\n\n        const geometry = new BAS.PointBufferGeometry(count);\n\n        const loadingCircle = ParticleSystem.getLoadingPoints();\n        geometry.createAttribute('aStartLoading', 3, (data, index, num) => {\n            const startVec3 = new THREE.Vector3();\n            if (loadingCircle.length < brainPoints.length) {\n                startVec3.x = loadingCircle[(index * 3) + 0] || 0.0;\n                startVec3.y = loadingCircle[(index * 3) + 1] || 0.0;\n                startVec3.z = THREE.Math.randFloat(-80.0, 1500.0); // loadingCircle[index * 3 + 2] || 0\n            } else {\n                startVec3.x = 100.0;\n                startVec3.y = 100.0;\n                startVec3.z = THREE.Math.randFloat(-80.0, 1500.0); // loadingCircle[index * 3 + 2] || 0\n            }\n            startVec3.toArray(data);\n        });\n\n        const color = new THREE.Color();\n        geometry.createAttribute('aStartColor', 3, (data) => {\n            const { r, g, b } = me.particlesStartColor;\n\n            color.setRGB(r, g, b);\n            color.toArray(data);\n        });\n\n        geometry.createAttribute('scale', 1, (data) => {\n            data[0] = THREE.Math.randFloat(200.0, 400.0);\n        });\n\n        geometry.createAttribute('aEndColor', 3, (data) => {\n            const { r, g, b } = me.particlesStartColor;\n\n            color.setRGB(r, g, b);\n            color.toArray(data);\n        });\n\n        geometry.createAttribute('aEndPos', 3, (data, index) => {\n            const startVec3 = new THREE.Vector3();\n            startVec3.x = brainPoints[(index * 3) + 0];\n            startVec3.y = brainPoints[(index * 3) + 1];\n            startVec3.z = brainPoints[(index * 3) + 2];\n            startVec3.toArray(data);\n        });\n\n        this.totalDuration = duration + maxPointDelay;\n\n        geometry.createAttribute('aDelayDuration', 3, (data) => {\n            data[0] = Math.random() * maxPointDelay;\n            data[1] = duration;\n        });\n\n\n        const geometry2 = new BAS.PointBufferGeometry(count);\n\n        geometry2.createAttribute('position', 3, (data, index) => {\n            const startVec3 = new THREE.Vector3();\n            startVec3.x = brainPoints[(index * 3) + 0];\n            startVec3.y = brainPoints[(index * 3) + 1];\n            startVec3.z = brainPoints[(index * 3) + 2];\n            startVec3.toArray(data);\n        });\n\n\n        const material = new BAS.PointsAnimationMaterial({\n            // transparent: true,\n            // blending: THREE.AdditiveBlending,\n            vertexColors: THREE.VertexColors,\n            deptWrite: false,\n\n            blending: THREE.AdditiveBlending,\n            depthTest: true,\n            transparent: true,\n            uniforms: {\n                uTime: { type: 'f', value: 0 },\n                uProgress: { type: 'float', value: 0.0 },\n                uAngle: { type: 'f', value: 1.0 },\n                uPointSizeEffect: { type: 'f', value: 0.1 },\n                uColor: { value: new THREE.Color(0xffffff) },\n            },\n            defines: {\n                // USE_SIZEATTENUATION: false, // Change size of the particle depending of the camera\n            },\n            uniformValues: {\n                size: 1.9,\n                scale: 400,\n            },\n            vertexFunctions: [\n                BAS.ShaderChunk.ease_expo_in_out,\n                BAS.ShaderChunk.quaternion_rotation,\n                rotate,\n                random,\n                noise,\n            ],\n\n            vertexParameters: [\n                'uniform float uTime;',\n                'uniform float uPointSizeEffect;',\n                'uniform float uProgress;',\n                'uniform float uAngle;',\n                'attribute vec2 aDelayDuration;',\n                'attribute vec3 aStartLoading;',\n                'attribute vec3 aStartPos;',\n                'attribute vec3 aEndPos;',\n                'attribute vec3 aStartColor;',\n                'attribute vec3 aEndColor;',\n                'attribute float aStartOpacity;',\n                'attribute float aEndOpacity;',\n\n            ],\n            varyingParameters: [\n                `\n          varying vec3 vParticle;\n          varying vec3 vEndPos;\n          varying vec3 vStartLoading;\n          `,\n            ],\n            // this chunk is injected 1st thing in the vertex shader main() function\n            // variables declared here are available in all subsequent chunks\n            vertexInit: [\n                // calculate a progress value between 0.0 and 1.0 based on the vertex delay and duration, and the uniform time\n                'float tProgress = clamp(uProgress - aDelayDuration.x, 0.0, aDelayDuration.y) / aDelayDuration.y;',\n                // // ease the progress using one of the available easing functions\n                'tProgress = easeExpoInOut(tProgress);',\n                // 'tProgress = uProgress;'\n                // 'if(test){ tProgress = 0.0; } else { tProgress = 1.0 ;}'\n            ],\n            // this chunk is injected before all default position calculations (including the model matrix multiplication)\n            vertexPosition: [`\n        // linearly interpolate between the start and end position based on tProgress\n        // and add the value as a delta\n \n         if(tProgress < 0.5){ \n         vec2 pos = vec2(aStartLoading.xy*5.0);\n\n        // Use the noise function\n        float n = noise(aStartLoading.yx);\n     vec2 test;\n      if(mod(aStartLoading.x, 2.0) < 0.2){\n            test = rotate2D(aStartLoading.xy, PI*2.0 * uTime * uAngle * n);\n             transformed += vec3(test.x, test.y, aStartLoading.z * n);\n        }else if (mod(aStartLoading.x, 2.0) >= 0.2 && mod(aStartLoading.x, 2.0) < 1.5){\n            test = rotate2D(aStartLoading.xy + n, PI*2.0 * uTime * 0.05 * uAngle * n);\n            transformed += vec3(test.x, test.y, aStartLoading.z * n);\n        }else {\n            test = rotate2D(aStartLoading.xy + n, PI*2.0 * uTime * 0.01 * uAngle * n);\n            transformed += vec3(test.x, test.y , aStartLoading.z * n);\n        }\n        }else{\n        \n  \n        //Brain Particles\n           transformed += mix(aStartLoading, aEndPos, tProgress);\n        }   \n        `,\n            ],\n            // this chunk is injected before all default color calculations\n            vertexColor: [\n                // linearly interpolate between the start and end position based on tProgress\n                // and add the value as a delta\n                ` \n         vParticle = aEndPos;\n         \n        vEndPos = aEndPos;\n        vStartLoading = aStartLoading;\n        `,\n            ],\n\n            fragmentParameters: [\n\n                'uniform float uTime;',\n                'uniform vec3 uColor;',\n            ],\n            // convert the point (default is square) to circle shape, make sure transparent of material is true\n            // you can create more shapes: https://thebookofshaders.com/07/\n            fragmentShape: [\n                `\n        float distanceToCenter = distance(gl_PointCoord, vec2(0.5));\n        float pct = 1.0 - smoothstep(0.0, 0.5, distanceToCenter);\n        vec3 color = vec3(1.0) * gl_FragColor.rgb;\n        gl_FragColor = vec4(color, pct * gl_FragColor.a);\n\n       `],\n\n        });\n\n        const xRayMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                c: { type: 'f', value: 0.9 },\n                p: { type: 'f', value: 6.7 },\n                glowColor: { type: 'c', value: new THREE.Color(0x84ccff) },\n                viewVector: { type: 'v3', value: new THREE.Vector3(0, 0, 0) },\n                lightningTexture: { type: 't', value: this.mainBrain.brainXRayLight },\n                offsetY: { type: 'f', value: 0.3 },\n                uTime: { type: 'f', value: 0.0 },\n            },\n            vertexShader: xRayVertex,\n            fragmentShader: xRayFrag,\n            side: THREE.DoubleSide,\n            blending: THREE.AdditiveBlending,\n            transparent: true,\n            depthWrite: false,\n        });\n\n        const systemPoints = new THREE.Points(geometry, material);\n\n        console.error('MEMORIES', this.memories);\n        const xRayGeometry = new THREE.Geometry().fromBufferGeometry(this.mainBrain.endPointsCollections);\n        xRayGeometry.computeFaceNormals();\n        xRayGeometry.mergeVertices();\n        xRayGeometry.computeVertexNormals();\n\n        const xRayEffect = new THREE.Mesh(xRayGeometry, xRayMaterial);\n\n        // systemPoints.visible = false;\n        // system.scale.multiplyScalar(1.05);\n        // systemPoints.castShadow = true;\n        systemPoints.frustumCulled = false;\n        // systemPoints.visible = false;\n\n        // // depth material is used for directional & spot light shadows\n        // systemPoints.customDepthMaterial = BAS.Utils.createDepthAnimationMaterial(material);\n        // // distance material is used for point light shadows\n        systemPoints.customDistanceMaterial = BAS.Utils.createDistanceAnimationMaterial(material);\n\n        systemPoints.customDepthMaterial = new THREE.ShaderMaterial({\n            vertexShader: material.vertexShader,\n            fragmentShader: material.fragmentShader,\n            uniforms: material.uniforms,\n        });\n\n        // system.rotateX(-Math.PI / 2);\n        // systemPoints.rotateX(-Math.PI / 2);\n        return { xRayEffect, systemPoints };\n    }\n\n\n    update(deltaTime, camera, brain) {\n        // / this.particles.customDepthMaterial.uniforms.uTime.value = Math.sin(deltaTime);\n        // this.particles.customDistanceMaterial.uniforms.uTime.value = Math.sin(deltaTime);\n        this.particles.material.uniforms.uTime.value = deltaTime;\n        this.xRay.material.uniforms.viewVector.value = new THREE.Vector3().subVectors(camera.position, brain.position);\n        // console.log(\"Value\", Math.sin(deltaTime));\n\n        // this.xRay.material.uniforms.c.value =Math.sin(deltaTime);\n        this.xRay.material.uniforms.uTime.value = deltaTime;\n    }\n\n    isXRayActive(status) {\n        if (status) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 3.0, { p: 3.0 }, {\n                p: 5.0,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.xRay.material.uniforms.offsetY.value = Math.sin(progress.p);\n                },\n                onComplete: () => {\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 3.0, { p: 5.0 }, {\n                p: 3.0,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.xRay.material.uniforms.offsetY.value = Math.sin(progress.p);\n                },\n            });\n        }\n    }\n\n    updateTransitioning(val) {\n        this.particles.material.uniforms.uProgress.value += 1 / 300;\n        this.particles.customDepthMaterial.uniforms.uProgress.value += 1 / 300;\n        this.particles.customDistanceMaterial.uniforms.uProgress.value += 1 / 300;\n    }\n\n    transform(status) {\n        if (status) {\n            const progress = { p: 0.0 };\n            TweenMax.fromTo(progress, 5.9, { p: 0.0 }, {\n                p: 1.5,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.updateTransitioning(progress.p);\n                },\n                onComplete: () => {\n                    this.mainBrain.orbitControls.maxDistance = 700;\n                    this.mainBrain.orbitControls.autoRotate = true;\n                    this.updateTransitioning(1.5);\n                },\n            });\n        } else {\n            const progress = { p: 1.0 };\n            TweenMax.fromTo(progress, 2.0, { p: 1.0 }, {\n                p: 0.5,\n                ease: Power1.easeIn,\n                onUpdate: () => {\n                    this.updateTransitioning(progress.p);\n                },\n            });\n        }\n    }\n}\n\nexport default ParticleSystem;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/services/particlesSystem.js"],"sourceRoot":""}